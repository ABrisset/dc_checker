 
 
 
 
 
 
 cron job amazon ec2 avec whenever & mail • antoine brisset 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
         
  accueil  
  blog  
  contact  
     
  
  
 créer une tâche cron seo avec whenever, mail et amazon ec2 
     scripts seo  
  
     blog seo  >  scripts seo  
 publié le 12 nov 2013 
 quand on bosse le seo d'un site, on est souvent amené à corriger des petits bugs, bien souvent après qu'ils se soient déclarés. en automatisant certaines tâches, de manière quotidienne ou hebdomadaire, on peut être alerté plus rapidement des éventuels problèmes ou mettre en place un système de monitoring sur certaines données. 
 je vous propose donc ici un exemple de tâche cron vous permettant de suivre au travers d'un mail quotidien le nombre de pages de votre site indexées par google. pour ce faire, j'utiliserai les gems  mail ,  whenever  et  nokogiri . le script sera lancé depuis une instance linux d’ amazon ec2 , un des outils cloud de l'offre  aws  que je ne peux que recommander pour sa souplesse d'utilisation. d'autant qu'ec2 est gratuit pendant un an, à hauteur de 750 heures d'utilisation par mois. si vous souhaitez installer proprement ruby et les principaux utilitaires sur votre machine distance, je vous invite à suivre  ce court tutoriel .   scraper le nombre de résultats de la commande site:   pour commencer, il nous faut la méthode qui permettra de scraper le nombre de résultats google retournés par la commande site:nomdusite.com. celle-ci prendra en argument une url, exécutera la requête site:nomdusite.com sur google.fr et retournera le résultat sous forme de string. avant de commencer, il faut faire appel aux différentes gems dont on aura besoin.     #!/usr/bin/env ruby 

 require   'mail' 
 require   'net/http' 
 require   'nokogiri' 
 require   'open-uri' 
 require   'rubygems' 
 require   'timeout' 
    si vous avez installé bundler sur votre serveur linux, pensez à déclarer ces dépendances dans votre gemfile et à faire un petit  bundle install  pour installer les éventuelles gems manquantes.   première chose, on vérifie que l'url entrée en argument a la bonne syntaxe.     def   scrape_google  (  url  ) 
   if   url   =~   /^  #{  uri  ::  regexp  }  $/ 
    on instancie ensuite la variable “indexed_pages” qui contiendra nos résultats.         indexed_pages   =   nil 
    puis on commence le traitement, dans un block  begin…rescue , en fixant un timeout à 20 secondes pour l'ouverture de la page. via la gem  nokogiri , dont j'ai déjà parlé  ici , on va scraper tout ce qui est contenu dans le xpath correspondant au nombre de résultats affichés par google, e.g  environ … résultats (… secondes)          begin 
       timeout  .  timeout  (  20  )   do 
         data              =   nokogiri  ::  html  (  open  (  "http://www.google.fr/search?hl=fr&q=site%3a  #{  url  }  "  ).  read  ,   "utf-8"  ) 
         results           =   data  .  at_xpath  (  "//*[@id=  \"  resultstats  \"  ]"  ).  text 
    ensuite, on va rendre plus propre la chaine de caractères     en supprimant le contenu des parenthèses indiquant le temps d'exécution de la requête (via la méthode gsub)   en supprimant la sous-chaîne “résultats”.               proper_results    =   results  .  downcase  .  gsub  (  /\(.*\)/  ,   ""  ).  delete  (  "résultats"  ) 
         indexed_pages     =   "nombre de pages indexées :   #{  proper_results  }  ." 
       end 
    en cas d'erreur, on stocke le type d'erreur.         rescue   =>   e 
       indexed_pages   =   "nombre de pages indexées :   #{  e  }  ." 
     end 
    si l'uri entrée comme argument n'est pas valide, on renvoie ceci :       else 
     indexed_pages   =   "nombre de pages indexées :   #{  url  }   n'est pas une url valide." 
   end 
    dans tous les cas, on renvoie la variable “indexed_pages”, qui sera utilisée comme objet du mail, comme nous allons le voir dans la suite de l'article.       return   indexed_pages 
 end 
    envoyer un mail avec le nombre de résultats   maintenant que nous avons défini la méthode permettant de stocker le nombre de pages indexées, il faut créer la méthode permettant d'envoyer cette information par mail. la  gem  mail   va nous permettre de réaliser cela facilement.   dans l'exemple ci-dessous, j'utilise le smtp de gmail pour l'envoi du mail. mais si votre sendmail est bien configuré, vous pouvez opter pour celui-ci. je vous renvoie à la  doc  pour plus d'explications.   on crée un objet un mail avec  mail.new  auquel on passe en attributs le destinataire du mail, l'expéditeur, l'objet et, dans le corps du mail, on renvoie à l'objet issu de la méthode scrape_google définie précédemment. enfin, pour envoyer le mail, on utilise “deliver”.     def   send_mail  (  string  ) 
   mail   =   mail  .  new  ( 
     :to                 =>   'toto@gmail.fr'  , 
     :from               =>   'toto@ec2-amazon.com'  , 
     :subject            =>   'résultat de ma tâche cron seo'  , 
     :body               =>   "  #{  string  }  "  , 
   ) 
   mail  .  delivery_method   :smtp  ,{ 
     :address            =>   'smtp.gmail.com'  , 
     :port               =>   '587'  , 
     :user_name          =>   'votre_user@gmail.com'  , 
     :password           =>   'votre_mot_de_passe'  , 
     :authentification   =>   ':plain'  , 
   } 
   mail  .  deliver 
 end 

 index   =   scrape_google  (  "http://www.nomdusite.com"  ) 
 send_mail  (  index  ) 
    créer la tâche cron   dernière étape, la création de la tâche cron. installez tout d'abord la gem   whenever   sur votre instance. vous pouvez :     l'ajouter dans votre gemfile de cette façon (et exécuter en console un  bundle install )       gem   'whenever'  ,   :require   =>   false 
      ou alors l'installer directement en ligne de commande via “gem install whenever”.     dans le dossier où vous avez créé votre script, créez un nouveau dossier /config et ajoutez-y le fichier  schedule.rb  dans lequel vous allez définir votre tâche cron. la syntaxe est simple : il suffit de choisir une fréquence puis de définir quelle commande exécuter.   par exemple, pour exécuter chaque jour à 8h notre script d'envoi de mail, que l'on appelera index.rb, le fichier schedule.rb contiendra les lignes suivantes :     every   :day  ,   :at   =>   '8:00 am'   do 
    command   "cd ~/mon_dossier/;ruby index.rb" 
 end 
    pour que cette entrée soit ajoutée au crontab, il suffit ensuite dans la console d'exécuter la commande  whenever –update-crontab  au niveau du répertoire dans lequel se trouve le script.   et voilà, vous recevrez chaque jour par mail le nombre de pages indexées sur votre site !        comments powered by  disqus      
  
 
 
   saint andré lez lille 
 
   06 12 71 82 78 
 
    contact@antoine-brisset.com   
 
 
      
      
      
 
  © 2015 -  antoine brisset 
 
  
 
 
