 
 
 
 
 
 
 tester un proyx avec ruby • antoine brisset 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
         
  accueil  
  blog  
  contact  
     
  
  
 tester la validité d'un proxy avec ruby 
     scripts seo  
  
     blog seo  >  scripts seo  
 publié le 18 aug 2013 
 pour ne pas se faire refouler par google quand on lui envoie trop de requêtes en automatique, il est important de se munir de proxies. mais encore faut-il qu'ils soient valides ! qu'ils soient  publics  ou privés, l'important, c'est donc de pouvoir tester leur validité avant d'entamer toute action de scraping. 
 je vous propose donc un nouveau petit script ruby, qui à partir, d'un array de proxies, vérifie s'ils sont valides google ou non. ce script utilise la librairie  net::http , pensez donc à ajouter ceci en début de fichier.     #!/usr/bin/env ruby 

 require   'net/http' 
    commencez par définir une variable contenant vos proxies. par exemple :     proxies   =   [  "1.179.147.2:8080"  ,  "1.93.21.147:2222"  ,  "100.45.50.131:8080"  ,  "101.109.251.140:80"  ,  "101.109.251.140:8080"  ] 
    voici ensuite la méthode utilisée (que j'ai nommée connectable), commentée pas à pas :     def   connectable  (  array  ) 
     # on crée un array vide qui nous servira à collecter les proxies valides 
   results   =   array  .  new  (  0  ) 
   # on définit un block à partir de l'array 
   array  .  each   do   |  proxy  | 
     # on découpe le proxy avec ":" 
     # on crée ainsi les variables host et port à partir des deux éléments 
     host  ,   port   =   proxy  .  split  (  ':'  ) 
     # on démarre un block begin/end 
     begin 
         # on crée un nouvel objet http utilisant les paramètres du proxy 
         # la session n'est pas encore ouverte 
       http                =   net  ::  http  ::  proxy  (  host  ,   port  ).  new  (  'www.google.fr'  ) 
       # on définit un timeout de 0,5 secondes pour la connexion 
       http  .  open_timeout   =   0  .  5 
       # on définit un timeout de 0,5 secondes pour le chargement 
       http  .  read_timeout   =   0  .  5 
       # on ouvre la session avec la méthode start 
       http  .  start   do   |  connect  | 
         # on récupère la réponse http d'une requête "site:example.com" sur google 
         response   =   connect  .  head  (  '/search?safe=off&hl=fr&q=site:example.com'  ) 
         # on définit un comportement spécifique en fonction de la réponse 
         case   response 
         # si le code retour apartient à la classe net::httpok (code 200) 
         when   net  ::  httpok 
             # on stocke le proxy utilisé dans l'array results 
           results   <<   proxy 
         end 
       end 
     rescue 
         # si la connexion est impossible, on retourne nil 
       nil 
     end 
   end 
   # on affiche les proxies valides dans la console 
   puts   results 
 end 
    concrètement, l'objectif est d'ouvrir une connexion sur www.google.fr, en passant à travers chaque proxy de l'array, puis d'effectuer une requête assez “sensible” en utilisant la commande “site:”. si le code réponse renvoyé par google est 200, le proxy est considéré valide donc on le stocke, sinon on passe au suivant.   libre à vous de jouer sur les temps de timeout en fonction de votre tolérance aux performances des proxies. pour améliorer ce script, vous pouvez également exporter le tout dans un fichier csv.   pour exécuter la méthode, ajoutez simplement à la fin de votre fichier .rb :     connectable  (  proxies  ) 
    a vous de jouer !        comments powered by  disqus      
  
 
 
   saint andré lez lille 
 
   06 12 71 82 78 
 
    contact@antoine-brisset.com   
 
 
      
      
      
 
  © 2015 -  antoine brisset 
 
  
 
 
